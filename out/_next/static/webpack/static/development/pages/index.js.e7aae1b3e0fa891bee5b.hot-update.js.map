{"version":3,"file":"static/webpack/static/development/pages/index.js.e7aae1b3e0fa891bee5b.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from  '@material-ui/core/Select';\n\nexport default class BackPage extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      selectDateOptions: [],\n      histogramData: {},\n      selectDate: ''\n    }\n  }\n  componentDidMount() {\n    fetch('http://localhost:2827/back/times')\n    .then(res => res.json())\n    .then((res: any) => {\n      console.log(res);\n      let options: string = [];\n      res.data.map((itm: any) => {\n        options.push(itm.date);\n      })\n      this.setState({selectDateOptions: options})\n    })\n    this.getOption();\n  }\n  getOption (date: string = '2019-01-20') {\n    fetch(`http://localhost:2827/back/data/${date}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n    .then(res => res.json())\n    .then(res => {\n      console.log(res);\n      this.setState({\n        histogramData: {\n          backgroundColor: '#fff',\n          tooltip: {\n              trigger: 'axis',\n              axisPointer: {\n                  type: 'shadow'\n              }\n          },\n          legend: {\n              data: ['飞机场', '火车站', '高铁站'],\n              align: 'right',\n              right: 10,\n              textStyle: {\n                  color: \"#00265f\"\n              },\n              itemWidth: 10,\n              itemHeight: 10,\n              itemGap: 35\n          },\n          grid: {\n              left: '3%',\n              right: '4%',\n              bottom: '3%',\n              containLabel: true\n          },\n          xAxis: [{\n              type: 'category',\n              data: res.data.times,\n              axisLine: {\n                  show: true,\n              },\n              axisTick: {\n                  show: false,\n              },\n              axisLabel: {\n                  show: true\n              },\n          }],\n          yAxis: [{\n              type: 'value',\n              axisLabel: {\n                  formatter: '{value}'\n              },\n              axisTick: {\n                  show: false,\n              },\n              axisLine: {\n                  show: false,\n              },\n          }],\n          series: [{\n              name: '飞机场',\n              type: 'bar',\n              data: res.data.plane,\n              barWidth: 15,\n              barGap: 1,\n          }, {\n              name: '火车站',\n              type: 'bar',\n              data: res.data.train,\n              barWidth: 15,\n              barGap: 1,\n          }, {\n              name: '高铁站',\n              type: 'bar',\n              data: res.data.gaotie,\n              barWidth: 15,\n              barGap: 1,\n          }]\n        }\n      })\n    });\n  }\n  handleChange = (event: any) => {\n    console.log(event.target.value)\n    this.setState({\n      selectDate: event.target.value\n    });\n  };\n  render() {\n    return (\n      <>\n        <Grid item xs={6}>\n          <div>\n            选择日期：\n            <Select\n              value={this.state.selectDate}\n              onChange={this.handleChange}\n            >\n              {this.state.selectDateOptions.map((itm: any) => (\n                <MenuItem value={itm}>{itm}</MenuItem>\n              ))}\n            </Select>\n          </div>\n          <ReactEcharts\n            style={{minHeight: 600, background: '#fff', paddingTop: 12}}\n            option={this.state.histogramData}\n            notMerge={true}\n            lazyUpdate={true}\n          />\n        </Grid>\n        <Grid item xs={6}>\n        </Grid>\n      </>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA0GA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA7GA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AATA;AAaA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AA9DA;AADA;AAwEA;AACA;;;AAOA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA1IA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}